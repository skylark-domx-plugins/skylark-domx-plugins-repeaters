{"version":3,"sources":["views/linear-view.js"],"names":["define","langx","browser","eventer","noder","geom","$","viewTypeRegistry","ViewBase","LinearView","inherit","klassName","options","alignment","infiniteScroll","itemRendered","noItemsHTML","selectable","viewClass","template","item","_construct","repeater","prototype","call","this","clearSelectedItems","$el","find","removeClass","getSelectedItems","selected","each","push","setSelectedItems","items","force","i","$item","l","n","self","compareItemIndex","index","compareItemSelector","is","selector","selectItem","$itm","select","undefined","thumbnail_clearSelectedItems","addClass","isArray","length","before","helpers","$cont","$canvas","response","data","action","renderItem","_create$Item","subset","on","isDisabled","hasClass","trigger","container","append","$thumbnail","itemData","name","ctor"],"mappings":"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","file":"../../views/linear-view.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-query\",\r\n    \"../view-type-registry\",   \r\n    \"./view-base\"\r\n], function(langx, browser, eventer, noder, geom, $, viewTypeRegistry, ViewBase) {\r\n\r\n\r\n  var LinearView = ViewBase.inherit({\r\n    klassName : \"LinearView\",\r\n\r\n    options: {\r\n        alignment: 'left',\r\n        infiniteScroll: false,\r\n        itemRendered: null,\r\n        noItemsHTML: 'no items found',\r\n        selectable: false,\r\n        viewClass: \"repeater-linear\",\r\n\r\n        template : '<ul class=\"clearfix repeater-linear\" data-container=\"true\" data-infinite=\"true\" data-preserve=\"shallow\"></ul>',\r\n        item : {\r\n            template: '<li class=\"repeater-item\"><img  src=\"{{ThumbnailImage}}\" class=\"thumb\"/><h4 class=\"title\">{{name}}</h4></div>'\r\n        },\r\n    },\r\n\r\n     _construct : function (repeater,options) {\r\n        ViewBase.prototype._construct.call(this,repeater,options);\r\n        \r\n\r\n    },\r\n\r\n    //ADDITIONAL METHODS\r\n    clearSelectedItems : function() {\r\n        this.$el.find('.selectable.selected').removeClass('selected');\r\n    },\r\n\r\n    getSelectedItems : function() {\r\n        var selected = [];\r\n        this.$el.find('.selectable.selected').each(function() {\r\n            selected.push($(this));\r\n        });\r\n        return selected;\r\n    },\r\n\r\n    setSelectedItems : function(items, force) {\r\n        var selectable = this.options.selectable;\r\n        var self = this;\r\n        var i, $item, l, n;\r\n\r\n        //this function is necessary because lint yells when a function is in a loop\r\n        function compareItemIndex() {\r\n            if (n === items[i].index) {\r\n                $item = $(this);\r\n                return false;\r\n            } else {\r\n                n++;\r\n            }\r\n        }\r\n\r\n        //this function is necessary because lint yells when a function is in a loop\r\n        function compareItemSelector() {\r\n            $item = $(this);\r\n            if ($item.is(items[i].selector)) {\r\n                selectItem($item, items[i].selected);\r\n            }\r\n        }\r\n\r\n        function selectItem($itm, select) {\r\n            select = (select !== undefined) ? select : true;\r\n            if (select) {\r\n                if (!force && selectable !== 'multi') {\r\n                    self.thumbnail_clearSelectedItems();\r\n                }\r\n\r\n                $itm.addClass('selected');\r\n            } else {\r\n                $itm.removeClass('selected');\r\n            }\r\n        }\r\n\r\n        if (!langx.isArray(items)) {\r\n            items = [items];\r\n        }\r\n\r\n        if (force === true || selectable === 'multi') {\r\n            l = items.length;\r\n        } else if (selectable) {\r\n            l = (items.length > 0) ? 1 : 0;\r\n        } else {\r\n            l = 0;\r\n        }\r\n\r\n        for (i = 0; i < l; i++) {\r\n            if (items[i].index !== undefined) {\r\n                $item = $();\r\n                n = 0;\r\n                this.$el.find('.selectable').each(compareItemIndex);\r\n                if ($item.length > 0) {\r\n                    selectItem($item, items[i].selected);\r\n                }\r\n\r\n            } else if (items[i].selector) {\r\n                this.$el.find('.selectable').each(compareItemSelector);\r\n            }\r\n        }\r\n    },\r\n\r\n    before: function(helpers) {\r\n        var alignment = this.options.alignment;\r\n        var $cont = this.$el = this.repeater.$canvas.find(`.${this.options.viewClass}`);\r\n        var data = helpers.data;\r\n        var response = {};\r\n        var $empty, validAlignments;\r\n\r\n        if ($cont.length < 1) {\r\n            $cont = this.$el = $(this.options.template);\r\n\r\n            response.item = $cont;\r\n        } else {\r\n            response.action = 'none';\r\n        }\r\n\r\n        return response;\r\n    },\r\n\r\n    renderItem: function(helpers) {\r\n        var selectable = this.options.selectable;\r\n        var selected = 'selected';\r\n        var self = this;\r\n        var $item = this._create$Item(this.options.item.template,helpers.subset[helpers.index]);\r\n\r\n        $item.data('item_data', helpers.data.items[helpers.index]);\r\n\r\n        if (selectable) {\r\n            $item.addClass('selectable');\r\n            $item.on('click', function() {\r\n                if (self.isDisabled) return;\r\n\r\n                if (!$item.hasClass(selected)) {\r\n                    if (selectable !== 'multi') {\r\n                        self.repeater.$canvas.find('.repeater-linear .selectable.selected').each(function() {\r\n                            var $itm = $(this);\r\n                            $itm.removeClass(selected);\r\n                            self.repeater.$().trigger('deselected.lark.repeaterList', $itm);\r\n                        });\r\n                    }\r\n\r\n                    $item.addClass(selected);\r\n                    self.repeater.$().trigger('selected.lark.repeaterList', $item);\r\n                } else {\r\n                    $item.removeClass(selected);\r\n                    self.repeater.$().trigger('deselected.lark.repeaterList', $item);\r\n                }\r\n            });\r\n        }\r\n\r\n        helpers.container.append($item);\r\n\r\n        if (this.options.itemRendered) {\r\n            this.options.itemRendered({\r\n                container: helpers.container,\r\n                item: $thumbnail,\r\n                itemData: helpers.subset[helpers.index]\r\n            }, function() {});\r\n        }\r\n\r\n        return false;\r\n    }\r\n    \r\n  });\r\n\r\n\r\n    viewTypeRegistry[\"linear\"] = {\r\n        name : \"linear\",\r\n        ctor : LinearView\r\n    };\r\n\r\n    return LinearView;\r\n    \r\n});"]}