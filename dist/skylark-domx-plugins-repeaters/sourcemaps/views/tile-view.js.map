{"version":3,"sources":["views/tile-view.js"],"names":["define","langx","browser","eventer","noder","geom","$","views","ViewBase","TileView","inherit","klassName","options","alignment","infiniteScroll","itemRendered","noItemsHTML","selectable","viewClass","template","item","renderItem","clearSelectedItems","this","repeater","$canvas","find","removeClass","getSelectedItems","selected","each","push","setSelectedItems","items","force","i","$item","l","n","self","compareItemIndex","index","compareItemSelector","is","selector","selectItem","$itm","select","undefined","thumbnail_clearSelectedItems","addClass","isArray","length","opts","infScroll","infiniteScrolling","before","helpers","$empty","$cont","data","response","center","justify","left","right","thumbnail_injectSpacers","action","append","remove","call","$thumbnail","_create$Item","subset","on","isDisabled","hasClass","$element","trigger","container","after","itemData","name","ctor"],"mappings":"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","file":"../../views/tile-view.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-query\",\r\n    \"../views\",   \r\n    \"./view-base\"\r\n], function(langx, browser, eventer, noder, geom, $, views, ViewBase) {\r\n\r\n  var TileView = ViewBase.inherit({\r\n    klassName : \"TileView\",\r\n\r\n    options: {\r\n        alignment: 'left',\r\n        infiniteScroll: false,\r\n        itemRendered: null,\r\n        noItemsHTML: 'no items found',\r\n        selectable: false,\r\n        viewClass: \"repeater-tile\",\r\n        template : '<div class=\"clearfix repeater-tile\" data-container=\"true\" data-infinite=\"true\" data-preserve=\"shallow\"></div>',\r\n        item : {\r\n            template: '<div class=\"thumbnail repeater-thumbnail\"><img height=\"75\" src=\"{{src}}\" width=\"65\"><span>{{name}}</span></div>'\r\n        },\r\n        renderItem : null\r\n    },\r\n\r\n    //ADDITIONAL METHODS\r\n    clearSelectedItems : function() {\r\n        this.repeater.$canvas.find(`.${this.options.viewClass} .selectable.selected`).removeClass('selected');\r\n    },\r\n\r\n    getSelectedItems : function() {\r\n        var selected = [];\r\n        this.repeater.$canvas.find(`.${this.options.viewClass} .selectable.selected`).each(function() {\r\n            selected.push($(this));\r\n        });\r\n        return selected;\r\n    },\r\n\r\n    setSelectedItems : function(items, force) {\r\n        var selectable = this.options.selectable;\r\n        var self = this;\r\n        var i, $item, l, n;\r\n\r\n        //this function is necessary because lint yells when a function is in a loop\r\n        function compareItemIndex() {\r\n            if (n === items[i].index) {\r\n                $item = $(this);\r\n                return false;\r\n            } else {\r\n                n++;\r\n            }\r\n        }\r\n\r\n        //this function is necessary because lint yells when a function is in a loop\r\n        function compareItemSelector() {\r\n            $item = $(this);\r\n            if ($item.is(items[i].selector)) {\r\n                selectItem($item, items[i].selected);\r\n            }\r\n        }\r\n\r\n        function selectItem($itm, select) {\r\n            select = (select !== undefined) ? select : true;\r\n            if (select) {\r\n                if (!force && selectable !== 'multi') {\r\n                    self.thumbnail_clearSelectedItems();\r\n                }\r\n\r\n                $itm.addClass('selected');\r\n            } else {\r\n                $itm.removeClass('selected');\r\n            }\r\n        }\r\n\r\n        if (!langx.isArray(items)) {\r\n            items = [items];\r\n        }\r\n\r\n        if (force === true || selectable === 'multi') {\r\n            l = items.length;\r\n        } else if (selectable) {\r\n            l = (items.length > 0) ? 1 : 0;\r\n        } else {\r\n            l = 0;\r\n        }\r\n\r\n        for (i = 0; i < l; i++) {\r\n            if (items[i].index !== undefined) {\r\n                $item = $();\r\n                n = 0;\r\n                this.repeater.$canvas.find(`.${this.options.viewClass} .selectable`).each(compareItemIndex);\r\n                if ($item.length > 0) {\r\n                    selectItem($item, items[i].selected);\r\n                }\r\n\r\n            } else if (items[i].selector) {\r\n                this.repeater.$canvas.find(`.${this.options.viewClass} .selectable`).each(compareItemSelector);\r\n            }\r\n        }\r\n    },\r\n\r\n    selected: function() {\r\n        var infScroll = this.options.infiniteScroll;\r\n        var opts;\r\n        if (infScroll) {\r\n            opts = (typeof infScroll === 'object') ? infScroll : {};\r\n            this.infiniteScrolling(true, opts);\r\n        }\r\n    },\r\n    before: function(helpers) {\r\n        var alignment = this.options.alignment;\r\n        var $cont = this.repeater.$canvas.find(`.${this.options.viewClass}`);\r\n        var data = helpers.data;\r\n        var response = {};\r\n        var $empty, validAlignments;\r\n\r\n        if ($cont.length < 1) {\r\n            $cont = $(this.options.template);\r\n            $cont.addClass(this.options.viewClass);\r\n            if (alignment && alignment !== 'none') {\r\n                validAlignments = {\r\n                    'center': 1,\r\n                    'justify': 1,\r\n                    'left': 1,\r\n                    'right': 1\r\n                };\r\n                alignment = (validAlignments[alignment]) ? alignment : 'justify';\r\n                $cont.addClass('align-' + alignment);\r\n                this.thumbnail_injectSpacers = true;\r\n            } else {\r\n                this.thumbnail_injectSpacers = false;\r\n            }\r\n            response.item = $cont;\r\n        } else {\r\n            response.action = 'none';\r\n        }\r\n\r\n        if (data.items && data.items.length < 1) {\r\n            $empty = $('<div class=\"empty\"></div>');\r\n            $empty.append(this.options.noItemsHTML);\r\n            $cont.append($empty);\r\n        } else {\r\n            $cont.find('.empty:first').remove();\r\n        }\r\n\r\n        return response;\r\n    },\r\n    renderItem: function(helpers) {\r\n        if (this.options.renderItem) {\r\n            return this.options.renderItem.call(this,helpers);\r\n        }\r\n\r\n        var selectable = this.options.selectable;\r\n\r\n        var selected = 'selected';\r\n        var self = this;\r\n        var $thumbnail = this._create$Item(this.options.item.template,helpers.subset[helpers.index]);\r\n\r\n        $thumbnail.data('item_data', helpers.data.items[helpers.index]);\r\n\r\n        if (selectable) {\r\n            $thumbnail.addClass('selectable');\r\n            $thumbnail.on('click', function() {\r\n                if (self.isDisabled) return;\r\n\r\n                if (!$thumbnail.hasClass(selected)) {\r\n                    if (selectable !== 'multi') {\r\n                        self.repeater.$canvas.find(`.${this.options.viewClass} .selectable.selected`).each(function() {\r\n                            var $itm = $(this);\r\n                            $itm.removeClass(selected);\r\n                            self.repeater.$element.trigger('deselected.lark.repeaterThumbnail', $itm);\r\n                        });\r\n                    }\r\n\r\n                    $thumbnail.addClass(selected);\r\n                    self.repeater.$element.trigger('selected.lark.repeaterThumbnail', $thumbnail);\r\n                } else {\r\n                    $thumbnail.removeClass(selected);\r\n                    self.repeater.$element.trigger('deselected.lark.repeaterThumbnail', $thumbnail);\r\n                }\r\n            });\r\n        }\r\n\r\n        helpers.container.append($thumbnail);\r\n        if (this.thumbnail_injectSpacers) {\r\n            $thumbnail.after('<span class=\"spacer\">&nbsp;</span>');\r\n        }\r\n\r\n        if (this.options.itemRendered) {\r\n            this.options.itemRendered({\r\n                container: helpers.container,\r\n                item: $thumbnail,\r\n                itemData: helpers.subset[helpers.index]\r\n            }, function() {});\r\n        }\r\n\r\n        return false;\r\n    }\r\n    \r\n  });\r\n\r\n\r\n    views[\"tile\"] = {\r\n        name : \"tile\",\r\n        ctor : TileView\r\n    };\r\n\r\n    return TileView;\r\n    \r\n});"]}