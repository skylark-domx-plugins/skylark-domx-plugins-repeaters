{"version":3,"sources":["views/tile-view.js"],"names":["define","langx","browser","eventer","noder","geom","$","viewTypeRegistry","ViewBase","TileView","inherit","klassName","options","alignment","infiniteScroll","itemRendered","noItemsHTML","selectable","viewClass","template","item","renderItem","_construct","repeater","prototype","call","this","clearSelectedItems","$el","find","removeClass","getSelectedItems","selected","each","push","setSelectedItems","items","force","i","$item","l","n","self","compareItemIndex","index","compareItemSelector","is","selector","selectItem","$itm","select","undefined","thumbnail_clearSelectedItems","addClass","isArray","length","before","helpers","$empty","$cont","$canvas","data","response","center","justify","left","right","thumbnail_injectSpacers","action","append","remove","$thumbnail","_create$Item","subset","on","isDisabled","hasClass","trigger","container","after","itemData","name","ctor"],"mappings":"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","file":"../../views/tile-view.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-query\",\r\n    \"../view-type-registry\",   \r\n    \"./view-base\"\r\n], function(langx, browser, eventer, noder, geom, $, viewTypeRegistry, ViewBase) {\r\n\r\n  var TileView = ViewBase.inherit({\r\n    klassName : \"TileView\",\r\n\r\n    options: {\r\n        alignment: 'left',\r\n        infiniteScroll: false,\r\n        itemRendered: null,\r\n        noItemsHTML: 'no items found',\r\n        selectable: true,\r\n        viewClass: \"repeater-tile\",\r\n        template : '<div class=\"clearfix repeater-tile\" data-container=\"true\" data-infinite=\"true\" data-preserve=\"shallow\"></div>',\r\n        item : {\r\n            template: '<div class=\"thumbnail repeater-thumbnail\"><img height=\"75\" src=\"{{src}}\" width=\"65\"><span>{{name}}</span></div>'\r\n        },\r\n        renderItem : null\r\n    },\r\n\r\n    _construct : function (repeater,options) {\r\n        ViewBase.prototype._construct.call(this,repeater,options);\r\n    },\r\n\r\n    //ADDITIONAL METHODS\r\n    clearSelectedItems : function() {\r\n        this.$el.find(`.selectable.selected`).removeClass('selected');\r\n    },\r\n\r\n    getSelectedItems : function() {\r\n        var selected = [];\r\n        this.$el.find(`.selectable.selected`).each(function() {\r\n            selected.push($(this));\r\n        });\r\n        return selected;\r\n    },\r\n\r\n    setSelectedItems : function(items, force) {\r\n        var selectable = this.options.selectable;\r\n        var self = this;\r\n        var i, $item, l, n;\r\n\r\n        //this function is necessary because lint yells when a function is in a loop\r\n        function compareItemIndex() {\r\n            if (n === items[i].index) {\r\n                $item = $(this);\r\n                return false;\r\n            } else {\r\n                n++;\r\n            }\r\n        }\r\n\r\n        //this function is necessary because lint yells when a function is in a loop\r\n        function compareItemSelector() {\r\n            $item = $(this);\r\n            if ($item.is(items[i].selector)) {\r\n                selectItem($item, items[i].selected);\r\n            }\r\n        }\r\n\r\n        function selectItem($itm, select) {\r\n            select = (select !== undefined) ? select : true;\r\n            if (select) {\r\n                if (!force && selectable !== 'multi') {\r\n                    self.thumbnail_clearSelectedItems();\r\n                }\r\n\r\n                $itm.addClass('selected');\r\n            } else {\r\n                $itm.removeClass('selected');\r\n            }\r\n        }\r\n\r\n        if (!langx.isArray(items)) {\r\n            items = [items];\r\n        }\r\n\r\n        if (force === true || selectable === 'multi') {\r\n            l = items.length;\r\n        } else if (selectable) {\r\n            l = (items.length > 0) ? 1 : 0;\r\n        } else {\r\n            l = 0;\r\n        }\r\n\r\n        for (i = 0; i < l; i++) {\r\n            if (items[i].index !== undefined) {\r\n                $item = $();\r\n                n = 0;\r\n                this.$el.find(`.selectable`).each(compareItemIndex);\r\n                if ($item.length > 0) {\r\n                    selectItem($item, items[i].selected);\r\n                }\r\n\r\n            } else if (items[i].selector) {\r\n                this.$el.find(`.selectable`).each(compareItemSelector);\r\n            }\r\n        }\r\n    },\r\n\r\n    before: function(helpers) {\r\n        var alignment = this.options.alignment;\r\n        var $cont =   this.$el = this.repeater.$canvas.find(`.${this.options.viewClass}`);\r\n        var data = helpers.data;\r\n        var response = {};\r\n        var $empty, validAlignments;\r\n\r\n        if ($cont.length < 1) {\r\n            $cont = this.$el = $(this.options.template);\r\n            $cont.addClass(this.options.viewClass);\r\n            if (alignment && alignment !== 'none') {\r\n                validAlignments = {\r\n                    'center': 1,\r\n                    'justify': 1,\r\n                    'left': 1,\r\n                    'right': 1\r\n                };\r\n                alignment = (validAlignments[alignment]) ? alignment : 'justify';\r\n                $cont.addClass('align-' + alignment);\r\n                this.thumbnail_injectSpacers = true;\r\n            } else {\r\n                this.thumbnail_injectSpacers = false;\r\n            }\r\n            response.item = $cont;\r\n        } else {\r\n            response.action = 'none';\r\n        }\r\n\r\n        if (data.items && data.items.length < 1) {\r\n            $empty = $('<div class=\"empty\"></div>');\r\n            $empty.append(this.options.noItemsHTML);\r\n            $cont.append($empty);\r\n        } else {\r\n            $cont.find('.empty:first').remove();\r\n        }\r\n\r\n        return response;\r\n    },\r\n    renderItem: function(helpers) {\r\n        if (this.options.renderItem) {\r\n            return this.options.renderItem.call(this,helpers);\r\n        }\r\n\r\n        var selectable = this.options.selectable;\r\n\r\n        var selected = 'selected';\r\n        var self = this;\r\n        var $thumbnail = this._create$Item(this.options.item.template,helpers.subset[helpers.index]);\r\n\r\n        $thumbnail.data('item_data', helpers.data.items[helpers.index]);\r\n\r\n        if (selectable) {\r\n            $thumbnail.addClass('selectable');\r\n            $thumbnail.on('click', function() {\r\n                if (self.isDisabled) return;\r\n\r\n                if (!$thumbnail.hasClass(selected)) {\r\n                    if (selectable !== 'multi') {\r\n                        self.$el.find(`.selectable.selected`).each(function() {\r\n                            var $itm = $(this);\r\n                            $itm.removeClass(selected);\r\n                            self.repeater.$().trigger('deselected', $itm);\r\n                        });\r\n                    }\r\n\r\n                    $thumbnail.addClass(selected);\r\n                    self.repeater.$().trigger('selected.lark.repeaterThumbnail', $thumbnail);\r\n                } else {\r\n                    $thumbnail.removeClass(selected);\r\n                    self.repeater.$().trigger('deselected.lark.repeaterThumbnail', $thumbnail);\r\n                }\r\n            });\r\n        }\r\n\r\n        helpers.container.append($thumbnail);\r\n        if (this.thumbnail_injectSpacers) {\r\n            $thumbnail.after('<span class=\"spacer\">&nbsp;</span>');\r\n        }\r\n\r\n        if (this.options.itemRendered) {\r\n            this.options.itemRendered({\r\n                container: helpers.container,\r\n                item: $thumbnail,\r\n                itemData: helpers.subset[helpers.index]\r\n            }, function() {});\r\n        }\r\n\r\n        return false;\r\n    }\r\n    \r\n  });\r\n\r\n\r\n    viewTypeRegistry[\"tile\"] = {\r\n        name : \"tile\",\r\n        ctor : TileView\r\n    };\r\n\r\n    return TileView;\r\n    \r\n});"]}